---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero.astro';
import Algorithm from '../components/Algorithm.astro';
// import ChartsSection from '../components/ChartsSection.astro';
import FindingsSection from '../components/FindingsSection.astro';
import TrajectoryViewer from '../components/TrajectoryViewer.astro';
import AuthorsCitation from '../components/AuthorsCitation.astro';

// Import component-specific styles
import '../styles/section.css';
import '../styles/hero.css';
import '../styles/authors.css';
import '../styles/resources.css';
import '../styles/trajectoryViewer.css';

const pageTitle = "Spatial Mental Modeling from Limited Views - MINDCUBE Benchmark";
---
<Layout title={pageTitle}>
  <Hero />
  <Algorithm />
  <!-- <ChartsSection /> -->
  <FindingsSection />
  <TrajectoryViewer />
  <AuthorsCitation />
</Layout>

<script>
  import { initTrajectoryViewer } from '../scripts/trajectoryViewer';
  import { initCitationCopy } from '../scripts/citation';

  document.addEventListener('DOMContentLoaded', () => {
    // Initialize citation copy functionality
    initCitationCopy();
    
    // Initialize trajectory viewer
    initTrajectoryViewer();

    // Text animation for hero section
    const animateTitle = () => {
      const titleElement = document.getElementById('animated-title');
      const subtitleElement = document.getElementById('animated-subtitle');
      
      if (titleElement && subtitleElement) {
        // Split title text into individual characters for animation
        const titleText = titleElement.innerText;
        titleElement.innerHTML = '';
        
        for (let i = 0; i < titleText.length; i++) {
          const charSpan = document.createElement('span');
          charSpan.className = 'reveal-char';
          charSpan.style.animationDelay = `${i * 0.1}s`;
          
          // Special handling for spaces to ensure they display correctly
          if (titleText[i] === ' ') {
            charSpan.innerHTML = '&nbsp;';
          } else {
            charSpan.innerText = titleText[i];
          }
          
          titleElement.appendChild(charSpan);
        }
        
        // Split subtitle text into individual characters for animation
        const subtitleText = subtitleElement.innerText;
        subtitleElement.innerHTML = '';
        
        for (let i = 0; i < subtitleText.length; i++) {
          const charSpan = document.createElement('span');
          charSpan.className = 'reveal-char-subtitle';
          charSpan.style.animationDelay = `${i * 0.05 + 0.5}s`; // Start after title animation
          
          // Special handling for spaces to ensure they display correctly
          if (subtitleText[i] === ' ') {
            charSpan.innerHTML = '&nbsp;';
          } else {
            charSpan.innerText = subtitleText[i];
          }
          
          subtitleElement.appendChild(charSpan);
        }
      }
    };
    
    // Run animation
    animateTitle();
  });
</script>